type: edu
custom_name: stage5
files:
- name: src/parking/Main.kt
  visible: true
  text: |
    package parking

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/ParkingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import parking.MainKt;

    public abstract class ParkingTest<T> extends StageTest<T> {
        public ParkingTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output." + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }


    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my.toLowerCase() != his.toLowerCase()) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task5Test : ParkingTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            spot_by_color yellow
                            create 4
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 White
                            park Rs-P-N-21 Red
                            park Rs-P-N-22 Red
                            reg_by_color GREEN
                            reg_by_color WHITE
                            spot_by_color GREEN
                            spot_by_color red
                            spot_by_reg ABC
                            spot_by_reg KA-01-HH-3672
                            spot_by_reg Rs-P-N-21
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 4 spots.
                            White car parked in spot 1.
                            White car parked in spot 2.
                            Red car parked in spot 3.
                            Red car parked in spot 4.
                            No cars with color GREEN were found.
                            KA-01-HH-9999, KA-01-HH-3672
                            No cars with color GREEN were found.
                            3, 4
                            No cars with registration number ABC were found.
                            2
                            3
                """.trimAllIndents(),
                        hint = "See example 1."
                ),
                outputCase(
                        """
                            spot_by_color yellow
                            reg_by_color yellow
                            spot_by_reg yellow
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check commands until the parking is created."
                ),
                outputCase(
                        """
                            create 5
                            park A AA
                            park B BB
                            park C BB
                            park D AA
                            park E AA
                            leave 4
                            reg_by_color aa
                            reg_by_color bb
                            reg_by_color zz
                            spot_by_color aa
                            spot_by_color bb
                            spot_by_color zz
                            spot_by_reg A
                            spot_by_reg B
                            spot_by_reg Z
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 5 spots.
                            AA car parked in spot 1.
                            BB car parked in spot 2.
                            BB car parked in spot 3.
                            AA car parked in spot 4.
                            AA car parked in spot 5.
                            Spot 4 is free.
                            A, E
                            B, C
                            No cars with color zz were found.
                            1, 5
                            2, 3
                            No cars with color zz were found.
                            1
                            2
                            No cars with registration number Z were found.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check the case, when the parking is not full."
                )

        )

        override fun check(reply: String, clue: OutputClue): CheckResult {
            return clue.compareLines(reply)
        }
    }
  learner_created: false
- name: src/parking/ConsoleInterface.kt
  visible: true
  text: |-
    package parking

    object ConsoleInterface {
        var parking: ParkingLot? = null
            get() {
                return field ?: println("Sorry, a parking lot has not been created.").let { null }
            }

        fun create(countSpots: String) {
            parking = ParkingLot(countSpots.toInt())
            println("Created a parking lot with $countSpots spots.")
        }

        fun park(number: String, color: String) {
            with(parking ?: return) {
                val car = Car(number, color)
                val spot = park(car)
                println("${car.color} car parked in spot $spot.")
            }
        }

        fun leave(spot: String) {
            with(parking ?: return) {
                val car = leave(spot.toInt())
                println("Spot $spot is free.")
            }
        }

        fun status() {
            with(parking ?: return) {
                occupiedSpots().takeIf { it.isEmpty() }?.let{ println("Parking lot is empty.") }
                occupiedSpots().forEach { println("${it.first} ${it.second?.number} ${it.second?.color}") }
            }
        }

        fun run() {
            while (true) {
                val command = readLine()!!.split(" ")
                try {
                    when (command[0]) {
                        "create" -> create(command[1])
                        "park" -> park(command[1], command[2])
                        "leave" -> leave(command[1])
                        "status" -> status()
                        "exit" -> return
                        else -> println("Unkown command")
                    }
                } catch (e: ParkingError) {
                    println(e.message)
                }
            }
        }
    }
  learner_created: true
- name: src/parking/Car.kt
  visible: true
  text: |
    package parking

    data class Car(val number: String, val color: String)
  learner_created: true
- name: src/parking/ParkingError.kt
  visible: true
  text: |-
    package parking

    class ParkingError(message: String): Exception(message) {
    }
  learner_created: true
- name: src/parking/ParkingLot.kt
  visible: true
  text: |-
    package parking

    class ParkingLot(val countSpots: Int) {
        private val lot = mutableMapOf<Int, Car?>()

        init {
            (1..countSpots).forEach { lot[it] = null }
        }

        fun freeSpots() = lot.filter { it.value == null }.keys.sorted()

        fun occupiedSpots() = lot.filter { it.value != null }.toList().sortedBy { it.first }

        fun park(car: Car): Int =
                freeSpots().firstOrNull()?.also { lot[it] = car }
                        ?: throw ParkingError("Sorry, the parking lot is full.")

        fun leave(spot: Int): Car =
                lot[spot].also { lot[spot] = null }
                        ?: throw ParkingError("There is no car in spot $spot.")
    }
  learner_created: true
- name: src/parking/Идеально решение
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/75/stages/420/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/75/stages/420/implement">JetBrains
    Academy</a>
  time: Sat, 16 Jan 2021 07:01:15 UTC
record: -1
